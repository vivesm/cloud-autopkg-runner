name: AutoPkg Scheduled Run

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      apps:
        description: 'Comma-separated list of apps to process (leave empty for all)'
        required: false
        type: string
      dry_run:
        description: 'Run in dry-run mode (no uploads)'
        required: false
        type: boolean
        default: false

env:
  AUTOPKG_VERSION: '2.7.2'
  PYTHON_VERSION: '3.11'

jobs:
  autopkg-run:
    name: Process Application Updates
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache AutoPkg
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/autopkg
            ~/Library/AutoPkg/Cache
          key: autopkg-cache-${{ runner.os }}-${{ hashFiles('autopkg/RecipeList.txt') }}
          restore-keys: |
            autopkg-cache-${{ runner.os }}-
      
      - name: Build and Run AutoPkg Container
        run: |
          docker build -t autopkg-runner:latest ./docker
          
          docker run \
            -v ${{ github.workspace }}:/workspace \
            -v /tmp/autopkg-cache:/root/Library/AutoPkg/Cache \
            -e JAMF_URL=${{ secrets.JAMF_URL }} \
            -e JAMF_USERNAME=${{ secrets.JAMF_USERNAME }} \
            -e JAMF_PASSWORD=${{ secrets.JAMF_PASSWORD }} \
            -e VIRUSTOTAL_API_KEY=${{ secrets.VIRUSTOTAL_API_KEY }} \
            -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            -e DRY_RUN=${{ inputs.dry_run }} \
            -e APPS_OVERRIDE="${{ inputs.apps }}" \
            --rm \
            autopkg-runner:latest
      
      - name: Process Results
        if: always()
        run: |
          python scripts/post_processor.py \
            --report-dir reports \
            --git-commit
      
      - name: Upload Processing Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: processing-report-${{ github.run_id }}
          path: reports/*.json
          retention-days: 30
      
      - name: Commit Changes
        if: success() && github.event_name == 'schedule'
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add reports/
          git add autopkg/Cache/
          git diff --staged --quiet || git commit -m "Update processing report and cache [skip ci]"
          git push
      
      - name: Send Notification
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `AutoPkg Run Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `The scheduled AutoPkg run has failed. Please check the [workflow logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`,
              labels: ['automation', 'failure']
            });

  security-scan:
    name: Security Validation
    needs: autopkg-run
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Run Security Audit
        run: |
          python scripts/utils/security_validator.py \
            --report-dir reports \
            --virustotal-key ${{ secrets.VIRUSTOTAL_API_KEY }}
      
      - name: SBOM Generation
        run: |
          # Generate Software Bill of Materials for processed packages
          python scripts/utils/sbom_generator.py \
            --input reports/latest.json \
            --output reports/sbom.json